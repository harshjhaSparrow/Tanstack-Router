/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as Layout2Import } from './routes/_layout2'
import { Route as LayoutImport } from './routes/_layout'
import { Route as UserIndexImport } from './routes/user/index'
import { Route as SettingsIndexImport } from './routes/settings/index'
import { Route as PostsIndexImport } from './routes/posts.index'
import { Route as UserUserIdImport } from './routes/user/$userId'
import { Route as SettingsProfileImport } from './routes/settings/profile'
import { Route as SettingsNotificationsImport } from './routes/settings/notifications'
import { Route as PostsPostIdImport } from './routes/posts.$postId'
import { Route as FilesSplatImport } from './routes/files/$'
import { Route as StatusStatusImport } from './routes/_status/status'
import { Route as Layout2ChildOfLayout2Import } from './routes/_layout2/ChildOfLayout2'
import { Route as LayoutChildOfLayoutImport } from './routes/_layout/ChildOfLayout'
import { Route as AboutAboutImport } from './routes/_about/about'
import { Route as UserUseridEditImport } from './routes/user.$userid.edit'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const Layout2Route = Layout2Import.update({
  id: '/_layout2',
  getParentRoute: () => rootRoute,
} as any)

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const UserIndexRoute = UserIndexImport.update({
  path: '/user/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsIndexRoute = SettingsIndexImport.update({
  path: '/settings/',
  getParentRoute: () => rootRoute,
} as any)

const PostsIndexRoute = PostsIndexImport.update({
  path: '/posts/',
  getParentRoute: () => rootRoute,
} as any)

const UserUserIdRoute = UserUserIdImport.update({
  path: '/user/$userId',
  getParentRoute: () => rootRoute,
} as any)

const SettingsProfileRoute = SettingsProfileImport.update({
  path: '/settings/profile',
  getParentRoute: () => rootRoute,
} as any)

const SettingsNotificationsRoute = SettingsNotificationsImport.update({
  path: '/settings/notifications',
  getParentRoute: () => rootRoute,
} as any)

const PostsPostIdRoute = PostsPostIdImport.update({
  path: '/posts/$postId',
  getParentRoute: () => rootRoute,
} as any)

const FilesSplatRoute = FilesSplatImport.update({
  path: '/files/$',
  getParentRoute: () => rootRoute,
} as any)

const StatusStatusRoute = StatusStatusImport.update({
  path: '/status',
  getParentRoute: () => rootRoute,
} as any)

const Layout2ChildOfLayout2Route = Layout2ChildOfLayout2Import.update({
  path: '/ChildOfLayout2',
  getParentRoute: () => Layout2Route,
} as any)

const LayoutChildOfLayoutRoute = LayoutChildOfLayoutImport.update({
  path: '/ChildOfLayout',
  getParentRoute: () => LayoutRoute,
} as any)

const AboutAboutRoute = AboutAboutImport.update({
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const UserUseridEditRoute = UserUseridEditImport.update({
  path: '/user/$userid/edit',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/_layout2': {
      id: '/_layout2'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof Layout2Import
      parentRoute: typeof rootRoute
    }
    '/_about/about': {
      id: '/_about/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutAboutImport
      parentRoute: typeof rootRoute
    }
    '/_layout/ChildOfLayout': {
      id: '/_layout/ChildOfLayout'
      path: '/ChildOfLayout'
      fullPath: '/ChildOfLayout'
      preLoaderRoute: typeof LayoutChildOfLayoutImport
      parentRoute: typeof LayoutImport
    }
    '/_layout2/ChildOfLayout2': {
      id: '/_layout2/ChildOfLayout2'
      path: '/ChildOfLayout2'
      fullPath: '/ChildOfLayout2'
      preLoaderRoute: typeof Layout2ChildOfLayout2Import
      parentRoute: typeof Layout2Import
    }
    '/_status/status': {
      id: '/_status/status'
      path: '/status'
      fullPath: '/status'
      preLoaderRoute: typeof StatusStatusImport
      parentRoute: typeof rootRoute
    }
    '/files/$': {
      id: '/files/$'
      path: '/files/$'
      fullPath: '/files/$'
      preLoaderRoute: typeof FilesSplatImport
      parentRoute: typeof rootRoute
    }
    '/posts/$postId': {
      id: '/posts/$postId'
      path: '/posts/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof PostsPostIdImport
      parentRoute: typeof rootRoute
    }
    '/settings/notifications': {
      id: '/settings/notifications'
      path: '/settings/notifications'
      fullPath: '/settings/notifications'
      preLoaderRoute: typeof SettingsNotificationsImport
      parentRoute: typeof rootRoute
    }
    '/settings/profile': {
      id: '/settings/profile'
      path: '/settings/profile'
      fullPath: '/settings/profile'
      preLoaderRoute: typeof SettingsProfileImport
      parentRoute: typeof rootRoute
    }
    '/user/$userId': {
      id: '/user/$userId'
      path: '/user/$userId'
      fullPath: '/user/$userId'
      preLoaderRoute: typeof UserUserIdImport
      parentRoute: typeof rootRoute
    }
    '/posts/': {
      id: '/posts/'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsIndexImport
      parentRoute: typeof rootRoute
    }
    '/settings/': {
      id: '/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsIndexImport
      parentRoute: typeof rootRoute
    }
    '/user/': {
      id: '/user/'
      path: '/user'
      fullPath: '/user'
      preLoaderRoute: typeof UserIndexImport
      parentRoute: typeof rootRoute
    }
    '/user/$userid/edit': {
      id: '/user/$userid/edit'
      path: '/user/$userid/edit'
      fullPath: '/user/$userid/edit'
      preLoaderRoute: typeof UserUseridEditImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexLazyRoute,
  LayoutRoute: LayoutRoute.addChildren({ LayoutChildOfLayoutRoute }),
  Layout2Route: Layout2Route.addChildren({ Layout2ChildOfLayout2Route }),
  AboutAboutRoute,
  StatusStatusRoute,
  FilesSplatRoute,
  PostsPostIdRoute,
  SettingsNotificationsRoute,
  SettingsProfileRoute,
  UserUserIdRoute,
  PostsIndexRoute,
  SettingsIndexRoute,
  UserIndexRoute,
  UserUseridEditRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_layout",
        "/_layout2",
        "/_about/about",
        "/_status/status",
        "/files/$",
        "/posts/$postId",
        "/settings/notifications",
        "/settings/profile",
        "/user/$userId",
        "/posts/",
        "/settings/",
        "/user/",
        "/user/$userid/edit"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/ChildOfLayout"
      ]
    },
    "/_layout2": {
      "filePath": "_layout2.tsx",
      "children": [
        "/_layout2/ChildOfLayout2"
      ]
    },
    "/_about/about": {
      "filePath": "_about/about.tsx"
    },
    "/_layout/ChildOfLayout": {
      "filePath": "_layout/ChildOfLayout.tsx",
      "parent": "/_layout"
    },
    "/_layout2/ChildOfLayout2": {
      "filePath": "_layout2/ChildOfLayout2.tsx",
      "parent": "/_layout2"
    },
    "/_status/status": {
      "filePath": "_status/status.tsx"
    },
    "/files/$": {
      "filePath": "files/$.tsx"
    },
    "/posts/$postId": {
      "filePath": "posts.$postId.tsx"
    },
    "/settings/notifications": {
      "filePath": "settings/notifications.tsx"
    },
    "/settings/profile": {
      "filePath": "settings/profile.tsx"
    },
    "/user/$userId": {
      "filePath": "user/$userId.tsx"
    },
    "/posts/": {
      "filePath": "posts.index.tsx"
    },
    "/settings/": {
      "filePath": "settings/index.tsx"
    },
    "/user/": {
      "filePath": "user/index.tsx"
    },
    "/user/$userid/edit": {
      "filePath": "user.$userid.edit.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
